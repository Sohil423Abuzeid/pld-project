"start symbol" = <program>
!terminals
Id = [letter]
Digit = [digit]

!nonterminals
<program>
<stmt_list>
<concept_list>
<concept>
<stmt>
<assign>
<if_stmt>
<for_stmt>
<while_stmt>
<switch_stmt>
<case_list>
<case>
<default_case>
<do_while_stmt>
<expr>
<term>
<factor>
<cond>
<op>
<data>
<step>
<id>



!rules
<program> ::= Start <stmt_list> End
           | <concept_list>

<stmt_list> ::= <stmt>
              | <stmt_list> <stmt> 

<concept_list> ::= <concept>
                 | <concept_list> <concept>

<concept> ::= <assign>
            | <if_stmt>
            | <for_stmt>
            | <while_stmt>
            | <switch_stmt>
            | <do_while_stmt>

<assign> ::= <id> '=' <expr> ';'

<if_stmt> ::= if '(' <cond> ')' Start <stmt_list> End
            | if '(' <cond> ')' Start <stmt_list> End else Start <stmt_list> End

<for_stmt> ::= for '(' <data> <assign> ';' <cond> ';' <step> ')' Start <stmt_list> End

<while_stmt> ::= while '(' <cond> ')' Start <stmt_list> End

<switch_stmt> ::= switch '(' <expr> ')' '{' <case_list> '}'

<case_list> ::= <case>
              | <case_list> <case>

<case> ::= case <expr> ':' <stmt_list>

<default_case> ::= default ':' <stmt_list>

<do_while_stmt> ::= do Start <stmt_list> End while '(' <cond> ')' ';'

<expr> ::= <term>
         | <expr> '+' <term>
         | <expr> '-' <term>

<term> ::= <factor>
         | <term> '*' <factor>
         | <term> '/' <factor>
         | <term> '%' <factor>

<factor> ::= Id
           | Digit

<cond> ::= <expr> <op> <expr>

<op> ::= '<'
       | '>'
       | '=='
       | '!='

<data> ::= int
         | float
         | double
         | string

<step> ::= '--' <id>
         | <id> '--'
         | <id> '++'
         | '++' <id>

<id> ::= Id

